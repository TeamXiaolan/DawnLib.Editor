using System;
using System.Collections.Generic;
using System.IO;
using System.Reflection;
using System.Text;
using UnityEditor;
using UnityEditor.Callbacks;
using UnityEngine;

namespace Dawn.Editor.EditorWindows;

public class DuskEntityReplacementBaker : EditorWindow
{
    private UnityEngine.Object? source;
    private MonoScript? chosenClass;
    private string outputFolder = "";

    [MenuItem("DawnLib/Dusk/Entity Replacement Baker/Bake Definition")]
    private static void Open() => GetWindow<DuskEntityReplacementBaker>("Dusk Entity Replacement Baker");

    private void OnGUI()
    {
        source = EditorGUILayout.ObjectField("Source (AI)", source, typeof(MonoScript), false);
        chosenClass = source as MonoScript;

        if (source == null)
        {
            return;
        }

        if (chosenClass == null)
        {
            EditorGUILayout.HelpBox($"No MonoBehaviours found on this Object {source.name}", MessageType.Error);
            return;
        }

        outputFolder = EditorGUILayout.TextField("Output Folder", outputFolder);

        using (new EditorGUI.DisabledScope(source == null))
        {
            if (GUILayout.Button("Bake (Generate Class)"))
            {
                Bake();
            }
        }
    }

    private void Bake()
    {
        Type type = chosenClass.GetClass();

        List<FieldInfo> audioFields = new();
        List<PropertyInfo> audioProperties = new();
        List<FieldInfo> audioListFields = new();
        List<FieldInfo> audioArrayFields = new();

        BindingFlags bindingFlags = BindingFlags.Instance | BindingFlags.Public;

        foreach (FieldInfo fieldInfo in type.GetFields(bindingFlags))
        {
            if (fieldInfo.FieldType == typeof(AudioClip))
            {
                audioFields.Add(fieldInfo);
            }
            else if (fieldInfo.FieldType == typeof(List<AudioClip>))
            {
                audioListFields.Add(fieldInfo);
            }
            else if (fieldInfo.FieldType == typeof(AudioClip[]))
            {
                audioArrayFields.Add(fieldInfo);
            }
        }

        foreach (PropertyInfo propertyInfo in type.GetProperties(bindingFlags))
        {
            if (propertyInfo.PropertyType == typeof(AudioClip) && propertyInfo.CanWrite && propertyInfo.GetIndexParameters().Length == 0)
            {
                audioProperties.Add(propertyInfo);
            }
        }

        if (audioFields.Count <= 0 && audioProperties.Count <= 0 && audioListFields.Count <= 0 && audioArrayFields.Count <= 0)
        {
            EditorUtility.DisplayDialog("Dusk Entity Replacement", "No audio fields/properties found", "OK");
            return;
        }

        BuildClass(type, audioFields, audioProperties, audioListFields, audioArrayFields);
    }

    private void BuildClass(Type type, List<FieldInfo> audioFields, List<PropertyInfo> audioProperties, List<FieldInfo> audioListFields, List<FieldInfo> audioArrayFields)
    {
        string typeName = type.FullName;
        StringBuilder sb = new StringBuilder();
        foreach (char character in typeName)
        {
            sb.Append(char.IsLetterOrDigit(character) ? character : '_');
        }
        typeName = sb.ToString();

        string className = $"DuskEntityReplacementDefinition_{typeName}";
        string @namespace = $"Dusk";

        Directory.CreateDirectory(outputFolder);
        string filePath = Path.Combine(outputFolder, $"{className}.cs");

        sb.Clear();

        sb.AppendLine("// <auto-generated> via DuskEntityReplacementBaker");
        sb.AppendLine("using UnityEngine;");
        sb.AppendLine("using System.Collections.Generic;");
        sb.AppendLine($"namespace {@namespace}");
        sb.AppendLine("{");
        if (typeof(EnemyAI).IsAssignableFrom(type))
        {
            sb.AppendLine($"    public class {className} : DuskEnemyReplacementDefinition<{type.FullName}>");
        }
        else
        {
            sb.AppendLine($"    public class {className} : DuskEntityReplacementDefinition<{type.FullName}>");
        }
        sb.AppendLine("    {");

        foreach (FieldInfo field in audioFields)
        {
            sb.AppendLine($"        public AudioClip {field.Name};");
        }

        foreach (PropertyInfo property in audioProperties)
        {
            sb.AppendLine($"        public AudioClip {property.Name};");
        }

        foreach (FieldInfo field in audioListFields)
        {
            sb.AppendLine($"        public List<AudioClip> {field.Name} = new();");
        }

        foreach (FieldInfo field in audioArrayFields)
        {
            sb.AppendLine($"        public AudioClip[] {field.Name} = new AudioClip[0];");
        }

        sb.AppendLine();
        sb.AppendLine($"        protected override void Apply({type.FullName} {type.Name})");
        sb.AppendLine("        {");

        foreach (FieldInfo field in audioArrayFields)
        {
            sb.AppendLine($"            {type.Name}.{field.Name} = this.{field.Name};");
        }

        foreach (FieldInfo field in audioListFields)
        {
            sb.AppendLine($"            {type.Name}.{field.Name}.AddRange(this.{field.Name});");
        }

        foreach (PropertyInfo property in audioProperties)
        {
            sb.AppendLine($"            {type.Name}.{property.Name} = this.{property.Name};");
        }

        foreach (FieldInfo field in audioFields)
        {
            sb.AppendLine($"            {type.Name}.{field.Name} = this.{field.Name};");
        }

        sb.AppendLine("        }");
        sb.AppendLine("    }");
        sb.AppendLine("}");

        File.WriteAllText(filePath, sb.ToString(), Encoding.UTF8);
        AssetDatabase.Refresh();
        string fqcn = $"Dusk.{className}";
        SessionState.SetString(PendingClassKey, fqcn);
        EditorUtility.DisplayDialog("Dusk", $"Don't touch anything, this will take a few seconds.", "OK");
        EditorUtility.RequestScriptReload();
    }

    private const string PendingClassKey = "DuskEntityReplacementBaker_PendingClass";

    [DidReloadScripts]
    private static void OnScriptsReloaded()
    {
        string fqcn = SessionState.GetString(PendingClassKey, string.Empty);
        if (string.IsNullOrEmpty(fqcn))
            return;

        SessionState.EraseString(PendingClassKey);

        string shortName = fqcn[(fqcn.LastIndexOf('.') + 1)..];

        EditorApplication.delayCall += () =>
        {

            string assetPath = EditorUtility.SaveFilePanelInProject("Create Entity Replacement Definition Asset", shortName, "asset", "Choose where to save the entity replacement definition asset");

            if (string.IsNullOrEmpty(assetPath))
                return;

            assetPath = AssetDatabase.GenerateUniqueAssetPath(assetPath);

            ScriptableObject definition = ScriptableObject.CreateInstance(fqcn);
            if (!definition)
            {
                Debug.LogError($"Failed to CreateInstance for {fqcn}. Is the script compiled without errors?");
                return;
            }

            AssetDatabase.CreateAsset(definition, assetPath);
            Selection.activeObject = definition;
            EditorGUIUtility.PingObject(definition);
            EditorUtility.DisplayDialog("Dusk", $"Successfully created entity replacement definition {shortName} at {assetPath}", "OK");
        };
    }
}